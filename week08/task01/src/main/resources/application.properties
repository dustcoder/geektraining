# sharding-jdbc 水平分库分表策略
# 配置数据源，给数据源起别名
# 水平分库需要配置多个数据库
spring.shardingsphere.datasource.names=m1,m2

# 一个实体类对应两张表，覆盖
spring.main.allow-bean-definition-overriding=true

# 配置第一个数据源的具体内容，包含连接池，驱动，地址，用户名，密码
spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://localhost:3306/hackathon?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=123

# 配置第二个数据源的具体内容，包含连接池，驱动，地址，用户名，密码
spring.shardingsphere.datasource.m2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m2.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m2.url=jdbc:mysql://localhost:3306/mytest?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.m2.username=root
spring.shardingsphere.datasource.m2.password=123

# 指定数据库分布的情况和数据表分布的情况
spring.shardingsphere.sharding.tables.t_mall_order.actual-data-nodes=m$->{1..2}.t_mall_order_$->{1..16}

# 指定 t_mall_order 表里面主键 id 的生成策略 SNOWFLAKE
spring.shardingsphere.sharding.tables.t_mall_order.key-generator.column=id
spring.shardingsphere.sharding.tables.t_mall_order.key-generator.type=SNOWFLAKE

# 指定分库策略    约定 order_no 值偶数添加到 m1 库，如果 order_no 是奇数添加到 m2 库
spring.shardingsphere.sharding.tables.t_mall_order.database-strategy.inline.sharding-column=order_no
spring.shardingsphere.sharding.tables.t_mall_order.database-strategy.inline.algorithm-expression=m$->{order_no % 2 + 1}

# 指定分表策略    约定 id 值对15取莫，对应不同的表
spring.shardingsphere.sharding.tables.t_mall_order.table-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.tables.t_mall_order.table-strategy.inline.algorithm-expression=t_mall_order_$->{user_id % 15 + 1}

# 打开 sql 输出日志
spring.shardingsphere.props.sql.show=true